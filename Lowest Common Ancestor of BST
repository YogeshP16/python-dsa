
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as 
the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.

Tc= O(log N)

This solution efficiently finds the lowest common ancestor (LCA) of two nodes p and q
in a binary search tree (BST) by recursively comparing their values with the current node.
It navigates left or right based on the comparisons until it reaches the LCA. 
The time complexity is O(log N) on average, where N is the number of nodes in the BST.


#Recursive approach

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        parent = root.val
        p_val = p.val
        q_val = q.val
        if p_val > parent and q_val > parent:
            return self.lowestCommonAncestor(root.right, p,q)
        if p_val < parent and q_val < parent:
            return self.lowestCommonAncestor(root.left, p,q)
        else:
            return root
